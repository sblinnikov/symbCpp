/*  BUGS:
       1.  _leave or _iterate all -- here all doesn't UPed (ALL)
           variable VARLV !!! Tue  03-09-1993  01:17:29

*/
--_outcom;
--_trace "write(*,*)";
--! _trace "write(*,*)'Wstate,Wp,spec,Outcar(Wpos),Wpos=',Wstate,Wp,spec,Outcar(Wpos),Wpos,";
--_trace "--------- ";
_Define
   @FirstLab Remlab=Labs(Ssptr)
   @Symbol MCS(@EqByte)   -- FOR Synt
   @CSYMB MCSYM(@EqByte)  -- FOR COMPS
-- @Wcard       'call dtcfio(1,Outcar);'
--   @Wcard       "WRITE(8,5050)OUTCAR;"
   @Wcard       "WRITE(8,5050)(OUTCAR(ii),ii=1,WPOS);"
--  @Wcard       "WRITE(*,5050)(OUTCAR(ii),ii=1,WPOS);
  --              WRITE(8,5050)(OUTCAR(ii),ii=1,WPOS);"
-- @WError      'call dtcfio(1,Wdia);Retcod=3;'
   @WError      "WRITE(8,5060)Wdia;Retcod=3;"
   @WError      "WRITE(8,@Eformat) CHLN ;Retcod=3;"
 _Label @Writer,@Synt,@Comps,@Writer_init,@Perror,@Eformat;
 SUBROUTINE DTCF2;
   _Include chargen; -- in trfcode removed
   _Include trfgunx;
   <*var: variables for 2d Passage *>;
   _include trfcode;
   _Include tree; -- Variables for Tree of program
   <*3: VTOROY PROHOD. PO TREE POSTROIT@ VYHODNOY TEKCT HA FORTRANE*>;
 RETURN;
 <*F: Formats *>;
 END;

%_Var:O

 <*C: variables for WTR *>;
 <*B: variable for SYNT *>;
 <*1: Common variables for coroutines COMPS,SYNT,WTR *>;
 <*A: variables for COMPS *>;
 <*Z: variables for ALIAS *>;

%3:

 COMPS=1; Synt=1;  -- _NEW(COMPS)(Synt)
 RETWTR=2;    -- Return from WRITER TO Synt
 Spec=1; Wpos=1;
 Fort=.false.;
 CKY=@KY; CrKO=@Cr;
 _DO I=1,@Lc; OUTCAR(I)=' ' _Od;
 TXTS(54)=Lcrko(@EqByte);
 @Symbol=@zero;Dig0=Cs;   -- code of 0
 GOTO @Writer_init;
 @Comps: GOTO(<*D:SPISOK METOK VO3OBNOVLENIJ COMPS*>),COMPS;
 2001: CONTINUE;
   <*2:SOPROGRAMMA COMPS. SOBIRAET DEREVO TREE B TEKCT STRUKTURIROVANNOGO
       FORTRANA, VYDAET POSIMVOL@NO B Synt, B KONCE VYDAET @Kt *>;
 @Synt: GOTO(<*E: Label List to resume Synt *>),Synt;
 3001: CONTINUE;
   <*3: SOPROGRAMMA Synt. POLU4AET TEKCT I3 COMPS,ANALI3IRUET TEKCT
        HA STRUKTURIROVANNOM FORTRANE. RAS6IRJET KOHCTPUKCII
        _WHILE,_IF,_DO,_ITERATE,_LEAVE,_CASE,_OF,_ESAC,_REPEAT,_UNTIL,
        [,] I SPECKODY OTNO6ENIY. VYDAET FORTRAN
        C RA3DELITELJMI METKI I OPERATORA(':' I @Ko).
        B KONCE VYDAET @Kt *>;
 @Writer_init: Continue;
   <*4:VYDAET OPERATORY FORTRANA POSTRO4NO, RASPOLAGAET METKI, PRI3NAKI
       PRODOLZENIJ. B KOLONKAH @Lcout,@Lc STAVIT HOMEP STROKI 3AGOLOVKA U3LA,
       I3 TEKCTA KOTOROGO SGENERIROVAN 1-Y SIMVOL OPERATORA *>
%_Var.1:O
 Integer*2 Dig0;
 @CHARACTER Mcs(2);
 INTEGER*2 CS,SW, -- SIMVOLY D/OBMENA COMPS-SYNT,SYNT-WTR;
    CHLN;     -- TEKUQIY HOMEP STROKI 3AGOLOVKA U3LA
 EQUIVALENCE (CS,MCS(1));
 @CHARACTER MSW(2);
 EQUIVALENCE (SW,MSW(1));

 --? to UPPER case Tue  03-09-1993  08:29:50
 INTEGER*2 SU1; -- temp. variables
 @CHARACTER MSU1(2);
 EQUIVALENCE (SU1,MSU1(1));

 Integer*2 COMPS,SYNT,RETWTR; -- UPRAVLJWQIE PEREMENNYE SOPROGRAMM
 Integer*2 Spec; -- 1 for ordinary , 2 for special trefor symbols
 Integer Posold; -- old position in OUTCAR
 INTEGER*2 WDIG;  -- for coding the digits
 @CHARACTER MWDIG(2); EQUIVALENCE(WDIG,MWDIG(1));
 @CHARACTER Outcar(@Lc);
 CHARACTER*6 BLANK6/'      '/,BOUTC;
 EQUIVALENCE(OUTCAR(1),BOUTC);
 --@Integer Ioutc,Ihead,Khead,Blank4/'    '/;
 --Integer*2 Koutc,Blank2/'  '/;
 --Equivalence (Outcar(1),Ioutc), (Outcar(5),Koutc);
 --Equivalence (Outcar(73),Ihead), (Outcar(77),Khead);
 LOGICAL Fort, -- Fortran format I/O
  Waitbr; -- Wait left bracket in _if _while _select
%3D:O
  2001,2002,2003
%3E:O
  3001,3002,3003,3004,3005,3006,3007,3008
%32:
 /* VAR VYDTEKST, PUT@ (CNSYMB,CASON,CSYMB,MCSYM,
     PNSYMB(@Stnode),PASON(@Stnode) PSPTR - CM.%3A).
     VAR CNODINF - INFORMACIJ O SOSTOJNII PROSMOTRA TEKUQEGO U3LA.
     VAR PATHSTACK - CTEK INFORMACII O SOSTOJNII PROSMOTRA U3LOV
       HA PUTI OT TEKUQEGO K KORNW.
     INT CNSYMB - HOMEP PERVOGO PODLEZAQEGO PROSMOTRU SIMVOLA.
     INT*2 CASON,CSYMB - INDEKS PERVOGO PODLEZAQEGO PROSMOTRU NASLEDNOGO
    U3LA , 3NA4ENIE SIMVOLA, HA KOTORYY UKA3YVAET PUT@.
     USLOVIE Q32:
       PUT@ RA3RE3AET DEREVO TEKCTOB HA DVE POLOVINY .
       LEVAJ I3 NIH SOOTVETSVUET TEKSTU , VYDANNOMU B VYDTEKST,
       A PUT@ UKA3YVAET HA PERVYY SIMVOL I3 PRAVOY POLOVINY. */
 <*2: SDELAT@ Q32 ISTINNYM PRI PUT@,UKA3.HA 1-Y SIMV.KORNEVOGO U3LA*>;
 _WHILE <*3: PUT@ HE UKA3YVAET HA @Ky KORNEVOGO U3LA*>_DO
   <*4: UMEN@6IT@ POLOVINU DEREVA SPRAVA OT PUT@ PRI INV Q32 *>
 _OD;
 CS=@KT;
 GOTO @Synt; -- RESUME Synt -VO3VRATA HE BUDET
%322:
 CNSYMB=1; CASON=2; CHLN=0; PSPTR=0;
 MCSYM(@EqByte)=TEXT(1);--ML.BAYT CSYMB
%323:O
   PSPTR^=0 ! CSYMB^=@Attention ! Text(cnsymb+1)^=KY(@EqByte)
%324:
 _If Csymb==@Attention _Then
    CNSYMB=CNSYMB+1; MCSYM(@EqByte)=TEXT(CNSYMB);-- Next symbol in csymb
    _Case Csymb _Of
  CS=CSYMB; COMPS=2; Retwtr=2; GOTO @Synt;
      _1 <*KY: VYYTI I3 U3LA,T.K. OH HE KORNEVOY(I3-3A 3AGOL.CIKLA) *>
      _2 <*TR: OBRABOTAT@ TREBOVANIE,TO EST@ NA4AT@ OBRABOTKU
        NASLEDNOGO U3LA,ILI VYDAT@ SOOBQENIE OB EGO OTSUTSTVII*>
      _3 <*DEF: Skip over _define region according to 4 bytes after
                @define, which keep address of the transition in the
                TEXT *>;
      _4 <*ALS: Process alias Name, i.e. find it in alias table TABALS
                and construct ALIAS TREE with all its SONs *>;
    _Esac;
 _Else
    SW=CSYMB; COMPS=2; Retwtr=1;GOTO @Writer;
 _Fi;
 2002: Continue;
 <*3: PEREYTI K SLED.SIMVOLU B TEKCTE TEKUQEGO U3LA *>;
%3243:
 CNSYMB=CNSYMB+1; MCSYM(@EqByte)=TEXT(CNSYMB);
-- write(*,*)' CNSYMB,TEXT(CNSYMB)=',CNSYMB,TEXT(CNSYMB),ichar(TEXT(CNSYMB));
%324_TR:
 _IF ATEXT(CASON)==0 _THEN
   <*1: VYDAT@ DIAGNOSTIKU, ISPOL@3UJ(LIND I HEADLN)(CASON) *>;
   CASON=CASON+1
 _ELSE
   <*2: CNSYMB I CASON B CTEK,B CHLN-HEADLN(CASON),B CNSYMB I CASON ADR:
    0-GO SIMVOLA I 1-GO NASL.U3LA K U3LU,TREBOVANIE HA K-RYY DOSTIGN.*>
 _FI
%324_TR.1:
 -- INT ILIND,REQLN; LOG Slind(@EqByte):=:ILIND.  CM %3A
 REQLN=HEADLN(CASON); NLIND=PLIND(CASON); NIND=0;
 _WHILE NLIND+NIND<PLIND(CASON+1) & NIND<@LC _DO
    ILIND=LIND(NLIND+NIND);
    NIND=NIND+1;
    LINDT(NIND)=Slind(@EqByte);
 _OD;
 WRITE(6,2999)REQLN,CASON,(LINDT(ILIND),ILIND=1,NIND);
 WRITE(0,2999)REQLN,CASON,(LINDT(ILIND),ILIND=1,NIND);
 RETCOD=MAX0(RETCOD,2);
%324_TR.2:
 CHLN=HEADLN(CASON); PSPTR=PSPTR+1;
 PNSYMB(PSPTR)=CNSYMB; PASON(PSPTR)=CASON;
 CNSYMB=ATEXT(CASON)-1; CASON=ASON(CASON);
%324_KY:
 -- U3EL HE KORNEVOY, SLED.PSPTR^=0
 CNSYMB=PNSYMB(PSPTR); CASON=PASON(PSPTR)+1; PSPTR=PSPTR-1;
 <*1: VOSSTANOVIT@ CHLN *>
%324_KY.1:
 _IF PSPTR==0 _THEN CHLN=0
 _ELSE CHLN=PASON(PSPTR); CHLN=HEADLN(CHLN)
 _FI
%324_DEF:
  posald(1)=text(Cnsymb+1);posald(2)=text(Cnsymb+2);
  posald(3)=text(Cnsymb+3);posald(4)=text(Cnsymb+4);
  Cnsymb=Ltextd-1; -- Posald equ. Ltextd
%324_ALS:
  /* Var INT Pathal
  Log Founda  - found alias
     Invariant Q_ALS: ( Founda &
       Pathal divides the tree of alias generated text into 2 parts:
       Left part corresponds to output text,
       Pathal points to 1-st symbol of the right part ) or ^Founda */
 <*1: make Q_ALS true, when Pathal points to 1-st symbol of definition
      of the root alias and Cnsymb points to the ENDSIGN of this alias *>;
 _While (<*2: Pathal does not point to TALFIN (of the root alias) *>)
 & Founda _Do
     <*3: reduce the part of alias tree to the right of Pathal for
          invariant  Q_ALS *>
 _Od;
 _If ^Founda _Then
   <*4: error message: in node CNODE alias not found *>;
 _Fi;
%324_ALS.1:
  Recals=.false.;  -- Recursion in Alias
  <*1: Accumulate alias name ALIAS() *>;
  <*2: Scan TABALS upward using ALPRED and find Cdef of ALIAS in
       TABALS, then Founda=.true. else Founda=.false. *>;
  _If Founda _Then
    Stals=0;   -- open alias stack
    Cndef=Cdef;   -- current Ndef
    Pathal=Talbeg(Cndef);
  _Fi;
%324_ALS.11:
  cnsymb=cnsymb+1; byte(1)=TEXT(cnsymb);
  cnsymb=cnsymb+1; byte(2)=TEXT(cnsymb);
  Alsprc=albyte; -- Equ. byte
  Lalias=0;
  cnsymb=cnsymb+1; @Csymb=TEXT(cnsymb);
  _While @Csymb^=@S_Blank & Lalias < @Lc _Do
    Lalias=Lalias+1; Alias(Lalias)=@Csymb;
    cnsymb=cnsymb+1; @Csymb=TEXT(cnsymb);
  _od;
%324_ALS.12:
 Csdef=Alsprc; Founda=.false.;
 _While Csdef > 0 & ^Founda _Do
   Cdef=Csdef;
   _If Lalias==Palias(Cdef+1)-Palias(Cdef) _Then
       <*1: SET Founda=.true. IF ALIAS()=Nalias() *>
   _Fi;
   Csdef=Alpred(Cdef);
 _Od;
%324_ALS.121:
 Jp7=0; Founda=.true.; KP7=Palias(Cdef);
 _While (Jp7<Lalias) & Founda _Do
   Jp7=Jp7+1;
   IF(ALIAS(Jp7)^=Nalias(KP7)) Founda=.false.;
   KP7=KP7+1;
 _Od;
%324_ALS.2:O
 Stals^=0 ! Pathal^=Talfin(Cndef)
%324_ALS.3:
--    write(*,*) ' Pathal Talbeg Cndef=', Pathal, Talbeg(Cndef), Cndef ;
    Mcsals(@EqByte)=TEXT(Pathal);
    _Select
       _ Pathal==Talfin(Cndef) [ <*1: return from alias *> ]
       _ Csals==@Attention     [ pathal=pathal+1;
                                 Mcsals(@EqByte)=Text(pathal);
                                 _If Csals==@Calias  _Then
                                  <*2:process son of current alias*>
                                 _Else
                                  Cs=Csals;comps=3;Retwtr=2;goto @Synt
                                 _Fi       ]
       _other         [  Sw=Csals;comps=3;Retwtr=1;goto @Writer]
    _End;
2003:Pathal=Pathal+1;
%324_ALS.31:
 Cndef=Stdefa(Stals);
 Pathal=Stpal(Stals);
 Stals=Stals-1;
%324_ALS.32:
  <*1: Accumulate alias name ALIAS() *>;
  <*2: Scan TABALS upward using ALPRED and find Cdef of ALIAS in
       TABALS, then Founda=.true. else Founda=.false. *>;
  _If Founda _Then
    <*3: put Pathal and Cndef into stack, Cndef:=Cdef,
  Pathal:= zeroth symbol of alias number Cdef *>
  _Fi;
%324_ALS.321:
  Lalias=0;
  pathal=pathal+1; @Csymb=TEXT(pathal);
  _While @Csymb^=@S_Blank & Lalias < @Lc _Do
    Lalias=Lalias+1; Alias(Lalias)=@Csymb;
    pathal=pathal+1; @Csymb=TEXT(pathal);
  _od;
%324_ALS.322=324_ALS.12:
%324_ALS.323:
  Stals=Stals+1;
  Stpal(Stals)=Pathal;
  Stdefa(Stals)=Cndef;
  Cndef=Cdef;
  Pathal=Talbeg(Cndef)-1;
  <*Rec: test on recursion in alias definition *>;
%324_ALS.323_REC:
  Tstals=Stals; Recals=.false.;
  _While Tstals>0 & ^Recals _Do
     _If Stdefa(Tstals)==Cdef _Then
      Recals=.true.; Founda=.false.;
     _Fi;
     Tstals=Tstals-1;
  _Od;
%324_ALS.4:
 _If Recals _Then
   write(6,2997) CHLN,(Alias(ial),ial=1,lalias);
   write(0,2997) CHLN,(Alias(ial),ial=1,lalias);
 _Else
   write(6,2998) CHLN,(Alias(ial),ial=1,lalias);
   write(0,2998) CHLN,(Alias(ial),ial=1,lalias);
 _Fi;
 Comps=2; Retwtr=2; Goto @PError; -- return through Synt
%_Var.Z:O
 Integer*4 Ltextd;
 @Integer  Lalias,
           Pathal;
-- Integer*2 Csals,
 Integer   Csals,
           Cdef,      -- Current ALIAS wanted number
           Cndef,     -- Current ALIAS definition number
           Csdef,      -- work var
           Stals,      -- open alias stack
           Tstals,
           Stpal(@Stals),  -- stack for Pathal
           Stdefa(@Stals), -- stack for Cdef
           JP7,kp7;
 @CHARACTER Mcsals(2); Equivalence (Mcsals(1),Csals);
 @CHARACTER Posald(4); Equivalence (Posald(1),Ltextd);
 @CHARACTER Alias(@lc),byte(2);
 Integer*2 Albyte; Equivalence (Albyte,byte(1));
 Logical Founda,Recals;

%_Var.A:O

 @Integer CNSYMB,PNSYMB(@Stnode);
 INTEGER*2 CASON,CSYMB,PASON(@Stnode),PSPTR;
 @CHARACTER MCSYM(2);  EQUIVALENCE (CSYMB,MCSYM(1)); -- %321
 INTEGER*2 ILIND,NLIND,NIND,REQLN;
 @CHARACTER Slind(2);  EQUIVALENCE (ILIND,Slind(1)); -- %3241
 Integer*2 CKY;
 @CHARACTER LINDT(@lc),KY(2);  EQUIVALENCE (CKY,KY(1));

%33:

/*  The stack automat, containing the stack states and either
    triplets of labels LAB1, LAB2, LAB3, or NCASE labels for CASE
    construction. Generates the following expansions:
 --------------------------------------------------------------
    1) _IF <P> _THEN <S1>  ! IF(.NOT.(<P>))GOTO<LAB1>;<S1>;
       _ELSE <S2>    ! GOTO<LAB2>;<LAB1>:CONTINUE;
       _FI     ! <S2>;<LAB2>:CONTINUE
 --------------------------------------------------------------
    2) _IF<P> _THEN <S> _FI! IF(.NOT.(<P>))GOTO<LAB1>;<S1>;
      ! <LAB1>:CONTINUE
 --------------------------------------------------------------
    3) _WHILE<P> _DO<S> _OD! <LAB1>:IF(.NOT.(<P>))GOTO<LAB2>;
      ! <S>;GOTO<LAB1>;<LAB2>:CONTINUE
    NB: _ITERATE & _LEAVE  ! ANALOGI4NO _DO-_OD;
 --------------------------------------------------------------
    4) _DO<3AG.>; <S> _OD  ! DO<LAB1><3AG.>;<S>;<LAB1>:CONTINUE
 --------------------------------------------------------------
    5) _DO<3AG.>;<S1>    ! DO<LAB1><3AG.>;<S1>;
       _ITERATE;<S2>_OD    ! GOTO LAB1;<S2>;LAB1:CONTINUE;
 --------------------------------------------------------------
    6) _DO<3AG.>;<S1>    ! DO<LAB1><3AG.>;<S1>;GOTO LAB2;<S2>;
       _LEAVE;<S2>_OD    ! LAB1:CONTINUE;LAB2:CONTINUE;
 --------------------------------------------------------------
    7) _CASE <I> _OF    ! GOTO(LAB1,LAB2,LAB3),<I>;
       _ <S1>     ! GOTO LAB0;
       _ <S2>     ! LAB1:CONTINUE;<S1>;GOTO LAB0;
       _ <S3>     ! LAB2:CONTINUE;<S2>;GOTO LAB0;
       _ESAC;     ! LAB3:CONTINUE;<S3>;
      ! LAB0:CONTINUE;
 --------------------------------------------------------------
    8) _REPEAT [ <S> ]    ! LAB1:CONTINUE;<S>;GOTO LAB1;
 --------------------------------------------------------------
    9) _REPEAT <S>    ! LAB1:CONTINUE;<S>;
       _UNTIL  <P>;    ! IF(.NOT.(<P>))GOTO LAB1;
 --------------------------------------------------------------
   10) _WHILE <P1> _DO    ! LAB1:IF(.NOT.(<P1>))GOTO LAB2;
   <S>     !   <S>
       _UNTIL <P2> _OD    ! IF(.NOT.(<P2>))GOTO LAB1;
      ! LAB2:CONTINUE;
 --------------------------------------------------------------
    NB: _ITERATE & _LEAVE  ! ANALOGI4NO _WHILE - _DO
 --------------------------------------------------------------
   11) _SELECT     ! IF(.NOT.(<P1>))GOTO LAB1;
  _  <P1> [ <S1> ]  !   <S1>;GOTO LABSEL;
  _  <P2> [ <S2> ]  ! LAB1:IF(.NOT.(<P2>))GOTO LAB2;
  _  <P3> [ <S3> ]  !   <S2>;GOTO LABSEL;
  _OTHER  [ <S4> ]  ! LAB2:IF(.NOT.(<P3>))GOTO LAB3;
       _END     !   <S3>;GOTO LABSEL;
      ! LAB3:<S4>;
      ! LABSEL:CONTINUE;
 --------------------------------------------------------------
 3DES@ SIMVOLOM ; OBO3NA4EN KONEC OPERATORA, : OTDELJET METKU
 OT OPERATORA.
    PO SPECKODAM GENERIRUET SLEDUWQIE RAS6IRENIJ:      (A)
      05- >  09- ^=  13- ^
      06- <  10- ==
      07- >=  11- &
      08- <=  12- !
 NA4AL@NOE CTEKOBOE SOSTOJNIE OBO3NA4ENO ^ , PRO4IE STEKOVYE SOSTOJNIJ:
    IF ,  WH  ,  DO  ,  TH  , WD  ,  EL,  CS, RP, UNTIL, SELECT , WDUN
 KONE4NOE CTEKOBOE SOSTOJNIE : KT.
 TABLICA ABTOMATA B KAZDOY KLETKE SODERZIT OTNO6ENIJ PRED6ESTVOVANIJ
 ( <:  ,   [] ,  :> , <<  ILI PUSTO ), HOBOE CTEKOBOE SOSTOJNIE ( ILI
 PUSTO ), HOMEP SEMANTI4ESKOY PODPRO RAMMY.
-----------------------------------------------------------------------
|ENTRY|  |    |SP.|    |   |    |   |    |    |    |    |    |    |   |
|CLASS|RE| KT |SIM| _DO|_OD|_IF |_FI|THEN|ELSE|WHI |LEA |ITE |CASE| OF|
|-----|ST|    |(A)|    |   |    |   |    |    |LE  |VE  |RAT |    |   |
|STATE| 1|  2 |  3|  4 | 5 | 6  | 7 | 8  | 9  | 10 | 11 | 12 |13  | 14|
-----------------------------------------------------------------------
|   1 |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|   ^ |P5| P5 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P0 | P0 |P14 | P0|
-----------------------------------------------------------------------
|   2 |  |[]KT|   |<:DO| :>|<:IF|   |    |    |<:WH|    |    |<<CS|   |
|  DO |P5| P7 | P4| P3 | P8| P1 | P0| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
|   3 |  |[]KT|   |    |   |    |   |[]TH|    |    |    |    |   !|  !|
|  IF |P5| P7 | P4| P0 | P0| P0 | P0| P6 | P0 | P0 | P0 | P0 | P0 | P0|
-----------------------------------------------------------------------
|   4 |  |[]KT|   |<:DO|   |<:IF| :>|   !|]EL |<:WH|    |    |<<CS|   |
|  TH |P5| P7 | P4| P3 | P0| P1 |P13| P0 | P9 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
|   5 |  |[]KT|   |<:DO|   |<:IF| :>|    |    |<:WH|    |    |<<CS|   |
|  EL |P5| P7 | P4| P3 | P0| P1 |P13| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
|   6 |  |[]KT|   |[]WD|   |    |   |    |    |    |    |    |    |   |
|  WH |P5| P7 | P4| P18| P0| P0 | P0| P0 | P0 | P0 | P0 | P0 |P0  | P0|
-----------------------------------------------------------------------
|   7 |  |[]KT|   |<:DO|:> |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|  WD |P5| P7 | P4| P3 |P10| P1 | P0| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
|   8 |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|  CS |P5| P7 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P11| P12|P14 |P17|
-----------------------------------------------------------------------
|  9  |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|REPEA|P5| P7 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
| 10  |  |[]KT|   |    |   |    |   |    |    |    |    |    |    |   |
|UNTIL|P5| P7 | P4| P0 | P0| P0 | P0| P0 | P0 | P0 | P0 | P0 |P0  | P0|
-----------------------------------------------------------------------
| 11  |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|SELEC|P5| P7 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
| 12  |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|OTHER|P5| P7 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P11| P12|P14 | P0|
-----------------------------------------------------------------------
| 13  |  |[]KT|   |    |   |    |   |    |    |    |    |    |    |   |
|WDUNT|P5| P7 | P4| P0 | P0| P0 | P0| P0 | P0 | P0 | P0 | P0 |P0  | P0|
-----------------------------------------------------------------------
| 14  |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|PROC |P5| P5 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P0 | P0 |P14 | P0|
-----------------------------------------------------------------------
| 15  |  |[]KT|   |<:DO|   |<:IF|   |    |    |<:WH|    |    |<<CS|   |
|AFT [|P5| P5 | P4| P3 | P0| P1 | P0| P0 | P0 | P2 | P0 | P0 |P14 | P0|
-----------------------------------------------------------------------
                    ------CONTINUATION -----
------------------------------------------------------------------
|ENTRY|   |    |    |    |     |    |   |    |    |    |    |    |
|CLASS|LAB|ESAC|REPE|UNT | SEL |OTH |END| [  | ]  | KO |PROC|RET |
|-----|   |    |AT  |IL  | ECT |ER  |   |    |    |    |    |URN |
|STATE|15 | 16 | 17 | 18 | 19  | 20 |21 | 22 | 23 | 24 | 25 | 26 |
------------------------------------------------------------------
|  1  |   |    |<:RP|    | <<SL|    |   |    |    |    |<:PR|    |
|  ^  |P0 | P0 | P19| P0 | P24 | P0 | P7| P0 | P32| P5 | P28| P0 |
------------------------------------------------------------------
|  2  |   |    |<:RP|    | <<SL|    |   |    |    |    |<:PR|    |
|  DO |P0 | P0 | P19| P0 | P24 | P0 | P7| P17| P8 | P5 | P28| P0 |
------------------------------------------------------------------
|  3  |   |    |    |    |     |    |   |[]TH|    |    |    |    |
|  IF |P0 | P0 | P0 | P0 |  P0 | P0 | P7| P31| P0 | P5 | P0 | P0 |
------------------------------------------------------------------
|  4  |   |    |<:RP|    | <<SL|    |   |    |:>  |    |<:PR|    |
|  TH |P0 | P0 | P19| P0 | P24 | P0 | P7| P17| P13| P5 | P28| P0 |
------------------------------------------------------------------
|  5  |   |    |<:RP|    | <<SL|    |   |    |:>  |    |<:PR|    |
|  EL |P0 | P0 | P19| P0 | P24 | P0 | P7| P17| P13| P5 | P28| P0 |
------------------------------------------------------------------
|  6  |   |    |    |    |     |    |   |[]WD|    |    |    |    |
|  WH |P0 | P0 | P0 | P0 |  P0 | P0 | P7| P30| P0 | P5 | P0 | P0 |
------------------------------------------------------------------
|  7  |   |    |<:RP|[]WD| <<SL|    |   |    |    |    |<:PR|    |
|  WD |P0 | P0 | P19| P23| P24 | P0 | P7| P17| P10| P5 | P28| P0 |
------------------------------------------------------------------
|  8  |   |    |<:RP|    | <<SL|    |   |    |    |    |<:PR|    |
|  CS |P15| P13| P19| P0 | P24 | P0 |P13| P0 | P0 | P5 | P28| P0 |
------------------------------------------------------------------
|  9  |   |    |<:RP|[]UN| <<SL|    |   |    |    |    |<:PR|    |
|REPEA|P0 | P0 | P19| P23| P24 | P0 | P7| P21| P20| P5 | P28| P0 |
------------------------------------------------------------------
| 10  |   |    |    |    |     |    |   |    |    |    |    |    |
|UNTIL|P0 | P0 | P0 | P0 | P0  | P0 | P7| P0 | P0 | P27| P0 | P0 |
------------------------------------------------------------------
| 11  |   |    |<:RP|    | <<SL|[]OT|   |    |    |    |<:PR|    |
|SELEC|P1 | P0 | P19| P0 | P24 |P21 |P13| P31| P25| P5 | P28| P0 |
------------------------------------------------------------------
| 12  |   |    |<:RP|    | <<SL|    |   |    |    |    |<:PR|    |
|OTHER|P0 | P0 | P19| P0 | P24 | P0 |P13| P21| P21| P5 | P28| P0 |
------------------------------------------------------------------
| 13  |   |    |    |    |     |    |   |    |    | [] |    |    |
|WDUNT|P0 | P0 | P0 | P0 | P0  | P0 | P7| P0 | P0 | P26| P0 | P0 |
------------------------------------------------------------------
| 14  |   |    |<:RP|    | <<SL|    |   |    |    |    |<:PR| :> |
|PROC |P0 | P0 | P19| P0 | P24 | P0 | P7| P0 | P32| P5 | P28| P16|
------------------------------------------------------------------
| 15  |   |    |<:RP|    | <<SL|    |   |    | :> |    |<:PR|    |
|AFT [|P0 | P0 | P19| P0 | P24 | P0 | P7| P0 | P29| P5 | P28| P0 |
------------------------------------------------------------------
  SIMVOLY PRED6ESTVOVANIJ O3NA4AWT SLEDUWQIE DEYSTVIJ:
  KOD   SIMVOL
   1    <:  Generate the new label LAB1 (providing the option
            for LAB2 and LAB3), put LAB1 and the code of the
            new stack state to the stack top.
   2    []  3AMENIT@ KOD HA CTEKE HA NOVYY
   0    :>  PUSTOE DEYSTVIE (B CEMAHT. PODPROGRAMME CO CTEKA
            BUDET UDALENA VERSHINA)
   3    <<  SGENERIROVAT@ NCASE METOK,3ANESTI KOD CASE HA CTEK.
  -------------------------------------------------------------------
   SEMANTI4ESKIE PODPROGRAMMY:
   see %3344
  -------------------------------------------------------------------
   P0: SOOBQENIE OB OSHIBKE           !P7: VYDAT@ VHODNOY SIMVOL I
   P1: VYDAT@ TEKCT[1]                !    SOOBQENIE OB O6IBKE.
   P2: VYDAT@ LAB1, TEKCT[15]         !P8: VYDAT@ TEKCT[16], LAB1,
   P3: VYDAT@ TEKCT[2], LAB1          !    TEKCT[13];SNJT@ VER6INU CT.
   P4: VYDAT@ TEKCT[I+2],GDE I-HOMEP  !P9: VYDAT@ TEKCT[14], LAB2,
       SPECKODA SIMVOLA OTNO6ENIJ     !    TEKCT[16],LAB1,TEKCT[17];
   P5: VYDAT@ VHODNOY SIMVOL.         !    LAB1 PRISVOIT@ LAB2
   P6: VYDAT@ TEKCT[12],LAB1,TEKCT[16]!P10:[14],LAB1,[16],LAB2,[13].
   P11: LEAVE                         !P12: ITERATE
   P13: LAB1:CONTINUE                 !P14: PRO4EST@ SL.SIMVOL(N=NCASE)
   P15: VYDAT@ ;GOTO LABST;LABST:     !     VYDAT@ GOTO(LAB1,LAB2,...
   P16: Process the _return           !     LABN),3APOLNJEM MAGA3IN
                                      !     METOK B PORJDKE:
   P17: VYDAT@ TEXT[16].              !     N+1,N,N+1,N-1,N+1,....1,N+1
   P18: VYDAT@ TEXT[12],TEXT[16]      !P19: VYDAT@ LAB1: TEXT[17]
   P20: VYDAT@ TEXT[12](TEXT[14]),    !P21: PUSTOE DEYSTVIE.
        DALEE KAK B P8(METKA 6008)    !P22: VYDAT@ TEXT[12],DALEE KAK P1
   P23: VYDAT@ TEXT[16],DALEE KAK P1  !P24: Select
   P25: ] after Select                !P26: ; after While-Do-Until
   P28: _proc
  ---------------------------------------------------------------------
   */
 <*1: PEREMENNYE I PROCEDURY DLJA Synt *>;

 _Proc @OutLT;
   Ioutlt=1; Numtxt=Out(1,jprog);
   _While Numtxt^=0 _Do
     _If Numtxt>0 _Then
        <*txt: output txt(Numtxt) *>;
     _Else
        <*lab: output Labs(Ssptr)+Numtxt+1 *>;
     _Fi;
     Ioutlt=Ioutlt+1; Numtxt=Out(Ioutlt,jprog);
   _Od;
 _Return;

 <*2: USTANOVIT@ NACHAL@NOE SOSTOJANIE STEKA I DR. PEREMENNYH *>;
 _WHILE <*3:NA VERSHINE CTEKA NE SOSTOJANIE @KT *> _DO
   Synt=2;
   GOTO @Comps;
   3002:CONTINUE;  -- RESUME COMPS
   <*4: TAKT RABOTY Synt C VHODNYM SIMVOLOM CS *>;
   3005: Continue;
 _OD

%331:

 -- CTEK:STATE(@nstatemax),Labs(@nstatemax),Ssptr;
 -- PEREMENNAJ Llab DLJ GENERACII METOK;
 -- PEREMENNYE DLJ ABTOMATA: SCLASS,SPRED,CSTACK,SPROG.  CM.%3B

%33_lab:

       Ilab=0; Remlab=Labs(Ssptr)+Numtxt+1;
       _WHILE Ilab < 5 _DO
         Ilab=Ilab+1;
         SW=Remlab/10000;
         Remlab=MOD(Remlab,10000)*10;
         SW=SW+Dig0;
         Synt=3;
         GOTO @Writer;
         3003: CONTINUE   -- RESUME WTR
       _OD;

%33_txt:

       ITXT=TBEG(Numtxt);
       CTXT=TLNG(Numtxt);  -- Outtxt
       _WHILE CTXT>0 _DO
          MSW(@EqByte)=TXTS(ITXT);
          Synt=4;
          GOTO @Writer;
          3004: CONTINUE; -- RESUME WTR
          CTXT=CTXT-1;
          ITXT=ITXT+1
       _OD

%332:
       Ssptr=1; STATE(1)=1; -- STATE: INITIAL
       Cvardo=1;
       Pvardo(1)=1;
       Ido=0;
       Cproc=0;
%333:O
       STATE(Ssptr)^=0
%334:
 <*1: POLU4IT@ B SCLASS KLASS SIMVOLA CS *>;
 <*2: RASPAKOVAT@ KLETKU TSYNT,COOTB.COCT.HA CTEKE I KLASSU SCLASS,
      B PEREMENNYE SPRED,CSTACK,SPROG *>;
 <*3: VYPOLNIT@ PODPROG.,COOTB.SPRED, ISPOL@3UJ CSTACK *>;
 <*4: VYPOLNIT@ CEMAHT. PODPROG. SPROG *>
%3341:
      SCLASS=CLASS(CS+1);
%3342:
      ISPROG=(SCLASS-1)*15+STATE(Ssptr);
      SPROG=SPRG(ISPROG);CSTACK=CSTK(ISPROG);SPRED=SPRD(ISPROG);
%3343:
      _CASE SPRED _OF
        _ <*1: PORODIT@ 3 METKI, 3ANESTI IH I CSTACK HA VER6INU CTEKA *>
        _ STATE(Ssptr)=CSTACK  -- 3AMENA STEKOVOGO SOSTOJNIJ
        _ Ssptr=Ssptr+1; STATE(Ssptr)=CSTACK
      _ESAC;
%33431:
       Ssptr=Ssptr+1; STATE(Ssptr)=CSTACK;
       Labs(Ssptr)=Llab; Llab=Llab-3;
%3344:
 _Case SPROG _Of;
   @Perror: CONTINUE;<*0:output B WTR SPECKOD @Er, Spec=2 *>;
   _1  <*1: output ";IF(.NOT.(", wait L_Bracket  *>
   _2  <*2: process WHILE: loop stack,
            output ";LAB1:IF(.NOT.(", wait L_Bracket  *>
   _3  <*3: process DO: output"DO LAB1", prepare Pvardo(),Vardo() *>;
   _4  <*4: output TXST(CS-2) where CS-2 is the code for
            relation or logical operation *>;
   _5  <*5: output CS, set Spec=2 *>;
   _6  <*6:output(TEXT(12),LAB1,TEXT(16)) *>;
   _7  <*7:output(@Er,@KT) *>;
   _8  <*8:output(TEXT(16),LAB1,TEXT(13)); *>;
   _9  <*9:output(TEXT(14),LAB2,TEXT(16),LAB1,TEXT(17)); LAB1:=LAB2 *>;
   _10 <*10:output(TEXT(14),LAB1);LAB2:CONTINUE *>;
   _11 <*11: process LEAVE   *>;
   _12 <*12: process ITERATE *>;
   _13 Jprog=14; _call @OutLT; Ssptr=Ssptr-1;
   _14 <*D: P14: INICIALI3ACIJ CASE *>;
   _15 <*E: P15: output ;GOTOLABST;LABST: *>;
   _16 <*T: P16: [19],retlab....[21],Lab1,[16] *>;
   _17 <*F: P17: output ;(TEXT[16]) *>;
   _18 <*18: output [12],LAB2,[16] *>;
   _19 <*K: P19: output LAB1,[17] *>;
   _20 <*L: P20: output [14],LAB1,[16] *>;
   _21 If(Fort) Numtxt=16 -- here 16 is a dummy to clear OUTCAR(1:6)
   _22 <*M: P22: output [12],DALEE KAK P10 *>;
   _23 <*N: P23: output ;,DALEE KAK P1 *>;
   _24 <*24: INICIALI3ACIJ SELECT *>;
   _25 <*P: SNJT@ CTEK,;GOTO LABSEL *>;
   _26 <*R:  ; after _While _Do _Until  *>;
   _27 <*27: close UNTIL *>;
   _28 <*28: decode NPROC ,[14], Lab1,[16] *>;
   _29 Jprog=1; _call @OutLT; Ssptr=Ssptr-1;
   _30 <*30: define the state for '[' after _While *>;
   _31 <*31: define the state for '[' after _IF or '_' in _Select *>;
   _32 <*32: process ']' in fort regime *>;
_Esac;
%33440:
  SW=@Er;NUMERR=NUMERR+1;Synt=5;Spec=2; GOTO @Writer;
%33441:
  Jprog=1; _Call @OutLT; Waitbr=.true.; If(Fort) Plst(33)=20;
%33442:
  Ido=Ido+1; LoopSt(Ido)=Ssptr; Leave(Ido)=0; Iter(Ido)=0;
  Pvardo(Ido+1)=Cvardo;
  Jprog=2; _Call @OutLT; Waitbr=.true.; If(Fort) Plst(33)=20;
%33443:
  Ido=Ido+1; LoopSt(Ido)=Ssptr; Leave(Ido)=0; Iter(Ido)=0;
  Jprog=3; _Call @OutLT;
  CNSYMB=CNSYMB+1; Msw(@EqByte)=TEXT(CNSYMB);
  _While Dclass(sw+1)==@S_Aster /* Digit or Letter */ _Do
--?     VARDO(Cvardo)=Msw(@EqByte);
     SU1=UP(SW+1); VARDO(Cvardo)=MSU1(@EqByte);
     Cvardo=Cvardo+1;
     Synt=8; GOTO @Writer;
     3008:   CNSYMB=CNSYMB+1; Msw(@EqByte)=TEXT(CNSYMB);
  _Od;
  Pvardo(Ido+1)=Cvardo;
  Cnsymb=Cnsymb-1; -- repeat last symbol in @Comps;
%33444:
  Jprog=23; Out(1,jprog)=CS-2;
  _Call @OutLT;
%33445:
  SW=CS; Synt=5; Spec=2; GOTO @Writer; -- RESUME WTR
%33446:
  Jprog=6; _Call @OutLT; Waitbr=.false.;If(Fort) Plst(33)=9;
%33447:
 Synt=6; SW=@Er; NUMERR=NUMERR+1; Spec=2; GOTO @Writer;
  3006: Synt=5; Sw=Cs; Spec=2; GOTO @Writer;
%33448:  -- _Od That closes _Do !!!
  Jprog=7; _call @OutLT;
  Jprog=8;
  _IF Leave(Ido)^=0 _Then       -- Do current Loop
    Out(2,Jprog)=-2;        -- contain _Leave ?
  _Else
    Out(2,Jprog)=0;      -- No
  _Fi;
  Cvardo=Pvardo(Ido); Ido=Ido-1;
  _Call @OutLT;
  Ssptr=Ssptr-1;
%33449:
    Jprog=9; _Call @OutLT;
    Labs(Ssptr)=Labs(Ssptr)-1;
%3344_10: -- _Od for _While - _Do
    _If Iter(Ido)^=0 _Then   -- Generate Lab3:Continue;
       Jprog=5; _Call @OutLT;
    _Fi;
    Jprog=10; _Call @OutLT;
    Cvardo=Pvardo(Ido); Ido=Ido-1; Ssptr=Ssptr-1;
%3344_11:   -- LEAVE
    Blab=1;  -- Set Flag for LAB2
5051:
    IF(Ido==0) goto @Perror;
    Jprog=11;
    <*1: GET VARLV, Lcurdo -- LENGTH OF VARLV *>;
    _SELECT
     _1   Lcurdo==0      [ NLoop=Ido ] -- Current Loop Level
     _2   Lcurdo==3 & VARLV(1)==ALL(1) & VARLV(2)==ALL(2)
                    & VARLV(3)==ALL(3) [ NLoop=1 ] -- Leave all
     _OTHER   [<*2: FIND NLoop: GOTO @Perror if not found *>]
    _END;
    SLoop=LoopSt(Nloop);  -- State of found Loop, Integer
    _IF Blab==1 _Then
      Leave(Nloop)=NLoop; -- Stack for _Leave
    _Else
      Iter(Nloop)=NLoop;  -- Stack for _Iterate
      IF(State(Sloop)==2) Blab=0;  -- Exception done for DO LOOP
    _Fi;
    SSPTR=SSPTR+1; LABS(SSPTR)=LABS(SLOOP)-BLAB;
    _Call @OutLT;
    SSPTR=SSPTR-1;
%3344_11.1:
   CNSYMB=CNSYMB+1; @Symbol=TEXT(CNSYMB);
   Lcurdo=0;
   _While DCLASS(cs+1)==@S_Aster _do
      Lcurdo=Lcurdo+1;
      CS=UP(CS+1);  --? Tue  03-09-1993  08:39:55
      VARLV(Lcurdo)=@Symbol;
      CNSYMB=CNSYMB+1; @Symbol=TEXT(CNSYMB);
   _od;
   CNSYMB=CNSYMB-1;
%3344_11.2:
   NLoop=0; Foundo=.FALSE.;
   _WHILE NLoop<Ido & ^Foundo _DO
        NLoop=NLoop+1;
        _IF Pvardo(NLoop+1)-Pvardo(Nloop)==Lcurdo _THEN
            JP7=0;Foundo=.TRUE.; Kp7=Pvardo(Nloop);
            _WHILE JP7<Lcurdo & Foundo _DO
                JP7=JP7+1;
                IF(VARLV(JP7)^=VARDO(KP7)) Foundo=.FALSE.;
                Kp7=Kp7+1;
            _OD
        _FI
   _OD;
   _IF ^Foundo _THEN
     WRITE(6,5049) CHLN,(VARLV(IJ),IJ=1,Lcurdo);
     WRITE(0,5049) CHLN,(VARLV(IJ),IJ=1,Lcurdo);GOTO @Perror
   _FI;
%3344_12:   -- ITERATE
     Blab=2;    -- Set Flag for LAB3
     GOTO 5051;    -- Entry to Find Nloop to be Iterated
%3344_27:
  Jprog=22; _call @OutLT;
  Jprog=19;
  _IF Leave(Ido)^=0 _Then       -- Do current Loop
    Out(2,Jprog)=-2;        -- contain _Leave ?
  _Else
    Out(2,Jprog)=0;      -- No
  _Fi;
  Cvardo=Pvardo(Ido); Ido=Ido-1;
 _Call @OutLT;
  Ssptr=Ssptr-1;
%3344_28:
  CNSYMB=CNSYMB+1; MCSYM(1)=TEXT(CNSYMB);
  CNSYMB=CNSYMB+1; MCSYM(2)=TEXT(CNSYMB); NPROC=CSYMB;-- NPROC
  Cproc=Cproc+1; STPROC(Cproc)=Nproc;  -- stack for procedures
  Jprog=18; _call @OutLT;
%3344T:
  Nproc=Stproc(Cproc); Cproc=Cproc-1;
  Ncall=Nc1st(Nproc);
  Jprog=12; _call @OutLT;
  SSPTR=SSPTR+1;
  Jprog=13;
  _While Ncall^=0 _Do
    Labs(ssptr)=Retlab(Ncall);
    IF(Nextc(Ncall)==0) Out(2,jprog)=21;
    _call @OutLT;
    Ncall=Nextc(Ncall);
  _Od;
  Out(2,jprog)=20;
  SSPTR=SSPTR-1;
   I2=7;
   _While Nproc^=0 _Do
     I2=I2-1;
     Wdig=Mod(Nproc,10)+@0;
     RETRT(I2)=Mwdig(@Eqbyte);
     Nproc=Nproc/10;
   _Od;
 _If I2>4 _Then
    I2=I2-1;
    _do I3=4,I2; Wdig=@0; RETRT(I3)=Mwdig(@Eqbyte) _od;
 _fi;
   i2=1;
   _While i2<=6 _do
     MSw(@EqByte)=RetRt(i2);
     i2=i2+1;
     Synt=7; goto @Writer;
     3007: Continue;
   _od;
  Jprog=14; _call @OutLT;
  Ssptr=Ssptr-1;
%3344R:
  Jprog=20; _call @OutLT;
  Cvardo=Pvardo(Ido); Ido=Ido-1; Ssptr=Ssptr-1;
%3344P:
  Ssptr=Ssptr-1;
  Jprog=4; _call @OutLT;
  Ssptr=Ssptr-1;
  Jprog=14; _call @OutLT;
  Ssptr=Ssptr-1;
%3344_24:
   CNSYMB=CNSYMB+1; MCSYM(@EqByte)=TEXT(CNSYMB);NSEL=CSYMB;-- NSEL
   LABSEL=Llab-NSEL; CURLAB=LABSEL; -- Bottom of Select-Stack
   Labs(Ssptr)=CURLAB;STATE(Ssptr)=CSTACK;
   _DO ISEL=1,NSEL;
     CURLAB=CURLAB+1;
     Ssptr=Ssptr+1;STATE(Ssptr)=CSTACK;Labs(Ssptr)=CURLAB;
     Ssptr=Ssptr+1;STATE(Ssptr)=CSTACK;Labs(Ssptr)=LABSEL;
     Ssptr=Ssptr+1;STATE(Ssptr)=CSTACK;Labs(Ssptr)=CURLAB;
   _OD;
   Llab=LABSEL-1;
   Jprog=15; _call @OutLT;
%3344N:  -- _Until
 _If Iter(Ido)^=0 _Then   -- Generate Lab3
  Jprog=21; _call @OutLT;
 _Fi;
 Jprog=1; _call @OutLT;
%3344M:
  Jprog=20; _call @OutLT;
  Cvardo=Pvardo(Ido); Ido=Ido-1; Ssptr=Ssptr-1;
%3344L: -- Close _Repeat [ ]
  _If Iter(Ido)^=0  _Then
   Jprog=5; _call @OutLT;
  _Fi;
  Jprog=18; _call @OutLT;
  Jprog=19;
  _IF Leave(Ido)^=0 _Then       -- Do current Loop
    Out(2,Jprog)=-2;        -- contain _Leave ?
  _Else
    Out(2,Jprog)=0;      -- No
  _Fi;
  Cvardo=Pvardo(Ido); Ido=Ido-1;
 _Call @OutLT;
  Ssptr=Ssptr-1;
%3344K:
  Ido=Ido+1;LoopSt(Ido)=Ssptr;Leave(Ido)=0;Iter(Ido)=0;
  Pvardo(Ido+1)=Cvardo;
  Jprog=17; _call @OutLT;
%3344D:
   CNSYMB=CNSYMB+1; MCSYM(@EqByte)=TEXT(CNSYMB);NC=CSYMB;-- NCASE
   Jprog=12; _Call @OutLT;
   CURLAB=Llab;ICASE=0;
   llab=llab-nc;
   ssptr=ssptr+2*Nc;   -- TOP of CASE stack
   STATE(SSPTR)=CSTACK;Labs(Ssptr)=Llab;  SSPTR=SSPTR-1;
   Jprog=13;
   _WHILE ICASE<NC _DO
     STATE(Ssptr)=CSTACK;Labs(Ssptr)=CURLAB;
     IF(ICASE==NC-1) Out(2,jprog)=21;
     _call @OutLT;
     CURLAB=CURLAB-1; ssptr=ssptr-1;
     STATE(Ssptr)=CSTACK;Labs(Ssptr)=Llab;   ssptr=ssptr-1;
     ICASE=ICASE+1;
   _OD;
   Out(2,jprog)=20;
   ssptr=ssptr+2*Nc+1;  -- TOP of CASE stack
   Llab=Llab-1;
%3344E:
  Jprog=4; _call @OutLT;
  Ssptr=Ssptr-1;
  Jprog=14; _call @OutLT;
  Ssptr=Ssptr-1;
%3344F:
  Jprog=15; _call @OutLT;
  If(Fort) Numtxt=16; -- here 16 is a dummy to clear OUTCAR(1:6)
%3344_18:
  Jprog=16; _call @OutLT; Waitbr=.false.;If(Fort) Plst(33)=9;
%3344_30:
  If(Fort) Plst(33)=9;
  _If Waitbr & Outcar(6)==@S_Blank & Wpos==16 _Then
     -- '[' immediately after _while
     _Do Ipos=1,8; Outcar(6+Ipos)=TXTS(45+Ipos) _Od;
     Posold=MAX0(Posold,15); Wpos=15; -- for WTR
     Jprog=15; _Call @OutLT;
     If(Fort) Numtxt=16; -- here 16 is a dummy to clear OUTCAR(1:6)
     STATE(Ssptr)=6;  -- change WD back into WH
     Ssptr=Ssptr+1; STATE(Ssptr)=15; -- After [
  _Else
     Jprog=16; _call @OutLT;
     If(Fort) Numtxt=16 -- here 16 is a dummy to clear OUTCAR(1:6)
  _Fi;
  Waitbr=.false.;
%3344_31:
  If(Fort) Plst(33)=9;
  _If Waitbr & Outcar(6)==@S_Blank & Wpos==16 _Then
     -- '[' immediately after _if  or  _
     Posold=MAX0(Posold,15);
     Wpos=7; Wstate=1;-- for WTR
     If(Cstack==4) STATE(Ssptr)=3;  -- change TH back into IF
     Ssptr=Ssptr+1; STATE(Ssptr)=15; -- After [
  _Else
     Jprog=6; _call @OutLT;
     If(Fort) Numtxt=16 -- here 16 is a dummy to clear OUTCAR(1:6)
  _Fi;
  Waitbr=.false.;

%3344_32:

  _If Fort _Then
     MSW(@Eqbyte)=@S_R_Br; SYNT=5; Goto @Writer
  _Else
     Goto @Perror
  _Fi

%_Var.B:O

--  NIZHE SIMVOLOM ; OBOZNACHEN SPECKOD @KO (KONEC OPERATORA):
 Integer*2 Ioutlt,Jprog,Out(6,23)/  -- TXTS
  16, 1, 0, 0, 0, 0,                --  1:  IF(.NOT.(
  16,-1,15, 0, 0, 0,                --  2:  DO
   2,-1, 0, 0, 0, 0,                -- 3:  .GT.
  14,-1, 0, 0, 0, 0,  -- 14a        -- 4:  .LT.
  16,-3,17, 0, 0, 0,  -- 10a,18a    -- 5:  .GE.
  12,-1,16, 0, 0, 0,                -- 6:  .LE.
  16,-1, 0, 0, 0, 0,  --  8a        -- 7:  .NE.
  17,-2,17, 0, 0, 0,                -- 8:  .EQ.
  14,-2,16,-1,17, 0,                -- 9:  .AND.
  14,-1,16,-2,17, 0,  -- 10         -- 10:  .OR.
  18,-1, 0, 0, 0, 0,                -- 11:  .NOT.
  19, 0, 0, 0, 0, 0,  -- 13a        -- 12:  ))GOTO
  -1,20, 0, 0, 0, 0,                -- 13:  :CONTINUE
  16,-1,17, 0, 0, 0,                -- 14:  ;GOTO
  16, 0, 0, 0, 0, 0,  -- 15         -- 15:  :IF(.NOT.(
  12,-2,16, 0, 0, 0,                -- 16:  ;
  -1,17, 0, 0, 0, 0,                -- 17:  :CONTINUE;
  14,-1,16, 0, 0, 0,                -- 18:  GOTO
  16,-2,17, 0, 0, 0,                -- 19:  GOTO(
  12,-1,16,-2,17, 0,  -- 20         -- 20:  ,
  16,-3,13, 0, 0, 0,                -- 21:  ),
  12,-1, 0, 0, 0, 0,                -- 22:  :
   0, 0, 0, 0, 0, 0/;               -- 23    THIS LINE CANNOT BE USED
@CHARACTER DCLASS(256)/
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      '*','*','*','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',' ',
      ' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',
      '*','*','*','*','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',
      ' ','*','*','*','*','*','*','*','*','*','*','*','*','*','*','*',
      '*','*','*','*','*','*','*','*','*','*','*',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
      ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '/;
INTEGER*2  CLASS(256)/
   2,   1,   1,   1,   1,   3,   3,   3,   3,   3,   3,   3,
   3,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
  14,  15,  16,  17,  18,  19,  20,  21,  25,  26,   1,  24,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,  22,  23,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,
   1,   1,   1,   1/;
 Integer*2 Crko;
 @CHARACTER lcrko(2);
 Equivalence (Crko,Lcrko);
 /*
 @CHARACTER TXTS(61) /':','I','F','(','.','N','O','T','.','(',
                      'D','O','.','G','T','.','L','T','.','G',
                      'E','.','L','E','.','N','E','.','E','Q',
                      '.','A','N','D','.','O','R','.',')',')',
                      'G','O','T','O',':','C','O','N','T','I',
                      'N','U','E','$','G','O','T','O','(',')',','/;
 */
 @CHARACTER TXTS(61) /':','I','F','(','.','N','O','T','.','(',
                      'D','O','.','>',' ','.','<',' ','.','>',
                      '=','.','<','=','.','/','=','.','=','=',
                      '.','A','N','D','.','O','R','.',')',')',
                      'G','O','T','O',':','C','O','N','T','I',
                      'N','U','E','$','G','O','T','O','(',')',','/;
 /*
 INTEGER*2 TBEG(22) /2,11,13,16,19,22,25,28,31,35,
                     5,39,45,54,1,54,45,55,55,61,60,45/;
 */

 INTEGER*2 TBEG(22) /2,11,14,17,20,23,26,29,31,35,
                     5,39,45,54,1,54,45,55,55,61,60,45/;
/*
 INTEGER*2 TLNG(22)/9,2,6*4,5,4,
                    5,6,9,5,10,1,10,4,5,1,2,1/;   --%3315
                    */
 INTEGER*2 TLNG(22)/9,2,1,1,2,2,2,2,5,4,
                    5,6,9,5,10,1,10,4,5,1,2,1/;   --%3315

 Integer*4 Remlab,LABSEL,CURLAB;  -- %3312
 INTEGER*2 SCLASS,SPRED,CSTACK,SPROG,NSEL,NC,ICASE,Nproc;   -- %331
 INTEGER*2 SPRG(390)/
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PROC A[
       5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,   5,-- REST
       5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,  5,   5,-- KT
       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  4,   4,-- <>^=...
       3, 3, 0, 3, 3,18, 3, 3, 3, 0, 3, 3, 0,  3,   3,-- _DO
       0, 8, 0, 0, 0, 0,10, 0, 0, 0, 0, 0, 0,  0,   0,-- _OD
       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  1,   1,-- _IF
       0, 0, 0,13,13, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,-- _FI
       0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,-- _THEN
       0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,   0,-- _ELSE
       2, 2, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0,  2,   2,-- _WHILE
       0,11, 0,11,11, 0,11,11,11, 0,11,11, 0,  0,   0,-- _LEAVE
       0,12, 0,12,12, 0,12,12,12, 0,12,12, 0,  0,   0,-- _ITERATE
      14,14, 0,14,14, 0,14,14,14, 0,14,14, 0, 14,  14,-- _CASE
       0, 0, 0, 0, 0, 0, 0,17, 0, 0, 0, 0, 0,  0,   0,-- _OF
       0, 0, 0, 0, 0, 0, 0,15, 0, 0, 1, 0, 0,  0,   0,-- _LABELS
       0, 0, 0, 0, 0, 0, 0,13, 0, 0, 0, 0, 0,  0,   0,-- _ESAC
      19,19, 0,19,19, 0,19,19,19, 0,19,19, 0, 19,  19,-- _REPEAT
       0, 0, 0, 0, 0, 0,23, 0,23, 0, 0, 0, 0,  0,   0,-- _UNTIL
      24,24, 0,24,24, 0,24,24,24, 0,24,24, 0, 24,  24,-- _SELECT
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21, 0, 0,  0,   0,-- _OTHER
       7, 7, 7, 7, 7, 7, 7,13, 7, 7,13,13, 7,  7,   7,-- _END
       0,17,31,17,17,30,17, 0,21, 0,31,21, 0,  0,   0,-- [
      32, 8, 0,13,13, 0,10, 0,20, 0,25,21, 0, 32,  29,-- ]
       5, 5, 5, 5, 5, 5, 5, 5, 5,27, 5, 5,26,  5,   5,-- KO
      28,28, 0,28,28, 0,28,28,28, 0,28,28, 0, 28,  28,-- _PROC
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16,  0/;-- _RETURN
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PROC A[
 INTEGER*2 CSTK(390)/
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PRC A[
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- REST
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- KT
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- <>^=...
       2, 2, 0, 2, 2, 7, 2, 2, 2, 0, 2, 2, 0,  2, 2,-- _DO
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _OD
       3, 3, 0, 3, 3, 0, 3, 3, 3, 0, 3, 3, 0,  3, 3,-- _IF
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _FI
       0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _THEN
       0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ELSE
       6, 6, 0, 6, 6, 0, 6, 6, 6, 0, 6, 6, 0,  6, 6,-- _WHILE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _LEAVE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ITERATE
       8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 8, 8, 0,  8, 8,-- _CASE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _OF
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _LABELS
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ESAC
       9, 9, 0, 9, 9, 0, 9, 9, 9, 0, 9, 9, 0,  9, 9,-- _REPEAT
       0, 0, 0, 0, 0, 0,13, 0,10, 0, 0, 0, 0,  0, 0,-- _UNTIL
      11,11, 0,11,11, 0,11,11,11, 0,11,11, 0, 11,11,-- _SELECT
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0, 0,  0, 0,-- _OTHER
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _END
       0, 0, 4, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- [
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- ] AS
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- KO
      14,14, 0,14,14, 0,14,14,14, 0,14,14, 0, 14,14,-- _PROC
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,0/;-- _RETURN
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PRC A[
 INTEGER*2 SPRD(390)/
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PRC A[
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- REST
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  2, 2,-- KT
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- <>^=...
       1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 0,  1, 1,-- _DO
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _OD
       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  1, 1,-- _IF
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _FI
       0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _THEN
       0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ELSE
       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  1, 1,-- _WHILE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _LEAVE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ITERATE
       3, 3, 0, 3, 3, 0, 3, 3, 3, 0, 3, 3, 0,  3, 3,-- _CASE
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _OF
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _LABELS
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _ESAC
       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  1, 1,-- _REPEAT
       0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0,  0, 0,-- _UNTIL
       3, 3, 0, 3, 3, 0, 3, 3, 3, 0, 3, 3, 0,  3, 3,-- _SELECT
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,  0, 0,-- _OTHER
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- _END
       0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- [ AS ;
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,-- ]
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,  0, 0,-- KO
       1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0,  1, 1,-- _PROC
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,0/;-- _RETURN
 --   WA DO IF TH EL WH WD CS RP UN SL OT WDU PRC A[
 INTEGER*2 Blab,Numtxt/0/;
 INTEGER*2 Ilab;        --  %33141
 INTEGER*2 ITXT,CTXT;        --  %33142
 Logical Foundo;
 @CHARACTER ALL(3)/'A','L','L'/,VARLV(@LC);              --  %3344B
 INTEGER*2 LoopSt(@Ndomax),Leave(@Ndomax),Pvardo(@Ndomax),
           Iter(@Ndomax),STATE(@Nstatemax),Labs(@Nstatemax),
           Ssptr,Sloop,Cvardo;
 Integer*2 Stproc(@procmax),Cproc,i2,i3;
 @CHARACTER VARDO(@Ndomax 0);
 INTEGER*2 Ido/0/;
 Integer*2 Lcurdo/0/;

%34:S

 /* KONE4NYY ABTOMAT, POLU4AWQIY POSIMVOL@NO TEKCT PROGRAMMY HA
    FORTRANE CO SPECRA3DELITELJMI: @KO-KONEC OPERATORA,@KT-KONEC TEKCTA,
    @CR - Carriage Return, @BCM - Begin Comment,  @ECM - End Comment,
    @Er-PRI3NAK O6IBKI,':'-KONEC METKI, a takze pepeklw4ateli
    tekyqey nactpoyki ppogpammy- @Fortran,@Trefor,@Pascal.
    States:
         S1 - Wait
         S2 - Continue Label
         S3 - Continue body of an Operator
         S4 - Comment
         S5 - Comment in an operator
         S0 - Final State
    VHODNYE KLASSY:
         1  - CIFRY 4 - @Er  7 - @S_Blank 10 - @Pascal
         2  - @KO 5 - :  8 - @Fortran, 11 - @CR
         3  - @KT 6 - OSTAL@NYE 9 - @Trefor,  12 - @BCM
         13 - @ECM
    Table cell contains two fields:
       !   WP   !  WP  - Number of Semantical program
       ! WSTATE !  WSTATE- Number of WRITER State
       * - marks that the cell is recoded by @Pascal or @Fortran
 ----------------------------------------------------------------------
 ! Class   !  D     !   KO   !  KT    !  Er    !  :   !  OCT. ! Blank !
 ! State   !  1     !   2    ! 3      !  4     !  5   !  6    !   7   !
 ----------------------------------------------------------------------
 ! Wait    !  P1  * !   0    ! 0      ! P3     ! P3   ! P2   *!  P2  *!
 ! (1)     !  S2    !  S1    !  S0    ! S1     ! S1   ! S3    !  S3   !
 ----------------------------------------------------------------------
 ! Continue!   0    !  P4    !  P4    ! P4     ! P5   ! P4    !  P5   !
 ! Label(2)!  S2    !  S1    !  S0    ! S1     ! S3   ! S1    !  S3   !
 ----------------------------------------------------------------------
 ! Continue!  P9    !  P6    !  P6    ! P8     ! P9   ! P9    !  P9   !
 ! oper.(3)!  S3    !  S1    !  S0    ! S3     ! S3   ! S3    !  S3   !
 ----------------------------------------------------------------------
 ! Comment !  P0    !  P15   !  P6    ! P0     ! P0   ! P0    !  P0   !
 ! (4)     !  S4    !  S4    !  S0    ! S4     ! S4   ! S4    !  S4   !
 ----------------------------------------------------------------------
 ! Comment !  P0    !  P15   !  P6    ! P0     ! P0   ! P0    !  P0   !
 ! in op(5)!  S5    !  S5    !  S0    ! S5     ! S5   ! S5    !  S5   !
 ----------------------------------------------------------------------
      -- CONTINUATION --
 ---------------------------------------------------------------
 ! Class   ! Fort   ! Trefor ! Pascal !  @Cr   ! @Bcm  ! @Ecm  !
 ! State   !  8     ! 9      !  10    !   11   !  12   !  13   !
 ---------------------------------------------------------------
 ! Wait    !  P10   !  P11   ! P12    !  P17   ! P13   !  P0   !
 ! (1)     !   S1   ! S1     !  S1    !   S1   !  S4   !  S1   !
 ---------------------------------------------------------------
 ! Continue!   P4   ! P4     !  P4    !  P17   !  P4   !  P3   !
 ! Label(2)!   S1   ! S1     !  S1    !   S2   !  S4   !  S1   !
 ---------------------------------------------------------------
 ! Continue!  P10   !  P11   ! P12    !  P17   ! P14   !  P0   !
 ! oper.(3)!   S1   ! S1     !  S1    !   S3   !  S5   !  S3   !
 ---------------------------------------------------------------
 ! Comment !   P0   ! P0     !  P0    !  P17   !  P0   !  P6   !
 ! (4)     !   S4   ! S4     !  S4    !   S4   !  S4   !  S1   !
 ---------------------------------------------------------------
 ! Comment !   P0   ! P0     !  P0    !  P17   !  P0   ! P16   !
 ! in op(5)!   S5   ! S5     !  S5    !   S5   !  S5   !  S3   !
 ---------------------------------------------------------------
    PEREMENNYE DLJ ABTOMATA I WRT:
   OUTCAR-BUFER VYH.KARTY, WPOS- TEKUQAJ PO3ICIJ B OUTCAR,
   WSTATE, WCLASS, WP - PEREM.DLJ ABTOMATA, WTAUT-TABLICA ABTOM.
   CM %3C */
 /*_Proc @HLN;   -- Head line number
    Ihead=Blank4; Khead=Blank4; -- clear head in Outcar(73:80)
    Wln=Chln; I34=80;
    _Repeat        -- Put Chln into Outcar(73:80)
       Wdig=mod(Wln,10)+@0;
       Outcar(I34)=Mwdig(@EQBYTE); I34=I34-1;
       Wln=Wln/10;
    _Until Wln==0;
--  _Do i=73,I34;
--     Outcar(i)=@S_Blank;
--  _Od;
    Lnold=Chln;
 _Return;*/
 _Proc @Putcard;       -- Clear remnant & output CARD
     _If posold>=Wpos _Then
       _Do I34=Wpos,Posold;
           Outcar(I34)=@S_Blank;
       _Od;
    _Fi;
    Posold=Wpos-1;
    @Wcard;
    Wpos=1;
 _Return;
 WSTATE=1;      --NA4AL@NOE COCT. ABTOMATA
 Lnold=-1;
 Posold=0;
 Icont=1;
 _WHILE WSTATE ^=0 _DO
   <*4: TAKT RABOTY ABTOMATA *>
 _OD

%344:

_Label @LabKO,@16;
 GOTO (@Comps,@Synt), Retwtr;
 @Writer: CONTINUE; -- RESUME Synt
 <*2: Get Writer variables WSTATE,WR,Wp *>;
 <*3: VYPOLNIT@ DEYSTVIJ B SOOTVETSTVII C PLIST *>;
 _Case Spec _Of
   _1 Outcar(Wpos)=Msw(@eqbyte); Wpos=Wpos+1
   _2 Spec=1
 _Esac;

%3442:

 Wcl=WCLASS(SW+1,Spec);
 @LabKO: ISTATE=(WSTATE-1)*13+Wcl;
 WP=PLST(ISTATE);WSTATE=WST(ISTATE);

%3443:

  _Case Wp _Of
      _1  --_If Chln^=Lnold _Then _call @HLN _Fi;
    --   Wpos=1
      _2  --_If Chln^=Lnold _Then _call @HLN _Fi;
    --   _Do I344=1,6; Outcar(I344)=@S_Blank; _Od;
          BOUTC=BLANK6;
          Wpos=7
      _3  @Werror
      _4  @Werror; _call @Putcard;
      _5  _While Wpos<6 _Do
            Outcar(Wpos)=@S_Blank; Wpos=Wpos+1;
          _Od;
          Msw(@EQBYTE)=@S_Blank;
      _6  _call @Putcard;
      _7  _Do I344=1,5; Outcar(i344)=@S_Blank; _Od;
          Outcar(6)=@S_Aster; Wpos=7;
      _8  @Werror;_Do I344=Wpos,@Lc; Outcar(i344)=@S_Blank; _Od;
          Wpos=@Lcout;
      _9  If(Wpos==@Lcout)goto @16;
      _10 -- Fortran
          Icont=1; Fort=.true.;
          Plst(1)=1;Wst(1)=2;
          Plst(2)=18;
          Plst(6)=19;
          Plst(7)=0; Wst(7)=1;
          Plst(15)=6; Plst(19)=9; Wst(19)=3;
                 WRITE(8,5060)Fortio;
             --  Call Dtcfio(1,Fortio(1));
      _11 -- Trefor
          Icont=1; Fort=.false.;
          Plst(1)=1;Wst(1)=2;
          Plst(2)=0;
          Plst(6)=2; Plst(7)=Plst(6);
          Wst(7)=3;
          Plst(15)=4; Plst(19)=4; Wst(19)=1;
                 WRITE(8,5060)Trefio;
              --  Call Dtcfio(1,TRefio(1));
      _12 -- Pascal
          Icont=2; Fort=.false.;
          Plst(1)=0; Wst(1)=3;
          Plst(2)=18;
          _Do i=@Lcout,@Lc [ Outcar(i)=@S_Blank ];
          Plst(6)=Plst(1); Plst(7)=Plst(6);
          Wst(7)=1;
              --?   WRITE(8,5060)Pascio;
              -- Call Dtcfio(1,Pascio(1));
      _13 -- _If Chln^=Lnold _Then _call @HLN _Fi;
          Outcar(1)=@S_C; Wpos=2;
      _14 _If Waitbr & Wpos==16 _Then
             Icont=3;
             _Do i=1,15; Savcar(i)=Outcar(i) _od
          _Else
             Waitbr=.false.; _call @Putcard;
          _Fi;
          Outcar(1)=@S_C; Wpos=2;
      _15 _call @Putcard;
       --   _If Chln^=Lnold _Then _call @HLN _Fi;
          Outcar(1)=@S_C; Wpos=2;
      _16 @16:
       _Case Icont _Of
        _1 _call @Putcard;
           _Do I344=1,5; Outcar(i344)=@S_Blank; _Od;
           Outcar(6)=@S_Aster; Wpos=7;
        _2 Mwdig(@Eqbyte)=Outcar(@Lc); Outcar(@Lc)=Symcon;
           _call @Putcard;
           Outcar(1)=Mwdig(@Eqbyte);Wpos=2;
        _3 _call @Putcard;
           _do i=1,15; Outcar(i)=Savcar(i) _od;
           Icont=1; Wpos=16;
       _Esac;
      _17 Wcl=2; Spec=2; goto @LabKO;
      _18 Wpos=1;  -- New HLN for pascal is needed here
      _19 -- _If Chln^=Lnold _Then _call @HLN _Fi; -- mozno v P1
          _If Numtxt>0 _Then -- text came from SYNT
         --   _Do I344=1,6; Outcar(I344)=@S_Blank; _Od;
              BOUTC=BLANK6;
              Wpos=7; Numtxt=0
          _Fi
      _20 Spec=2   -- for Fortran format I/O after _If _While _Select
  _Esac;

%_Var.C:O

 @CHARACTER Savcar(15)/15*' '/,Symcon/@S_CONTINUATION/;
 INTEGER*2 I34,I344,Lnold,Wcl,Icont/1/;
 Integer*4 Wln;
 Integer*2 WP,PLST(65)/
           1,  0, 0,  3, 3,  2, 2, 10, 11, 12, 17, 13, 0,
           0,  4, 4,  4, 5,  4, 5,  4, 4,  4, 17,  4, 3,
           9,  6, 6,  8, 9,  9, 9, 10, 11, 12, 17, 14, 0,
           0, 15, 6,  0, 0,  0, 0,  0, 0,  0, 17,  0, 6,
           0, 15, 6,  0, 0,  0, 0,  0, 0,  0, 17,  0, 16/;
 INTEGER*2 Wpos/@Lc/,WSTATE,WST(65)/
           2,   1,   0,   1,   1,  3, 3,1, 1, 1,1, 4, 1,
           2,   1,   0,   1,   3,  1, 3,1, 1, 1,2, 4, 1,
           3,   1,   0,   3,   3,  3, 3,1, 1, 1,3, 5, 3,
           4,   4,   0,   4,   4,  4, 4,4, 4, 4,4, 4, 1,
           5,   5,   0,   5,   5,  5, 5,5, 5, 5,5, 5, 3/;
INTEGER*2 WCLASS(256,2)/
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,11, 2, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 2, 6, 8, 9,10, 6,12,13, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6/;
 Character*40 WDIA
   /'C  TRF000  Syntactical or Alias error  '/,  -- %344324
    Fortio
   /'C-->Fortran section begins....         '/,  -- %3443A
    Trefio
   /'C-->Trefor  section begins....         '/,  -- %3443A
    Pascio
   /'(*  Pascal  section begins....       *)'/; -- %3443A

%F:O

 5060: FORMAT(A40);
 5050: FORMAT(@Lc A1);
 @Eformat: FORMAT('CERROR(',I4,') Syntactical or Alias error');
 5049: FORMAT(' In NODE beginning in line:',i4,
              ' LEAVE or ITERATE failed for: ',@lc A1);
 2998: FORMAT(' In NODE beginning in line:',i4,
              ' not defined  ALIAS @', @LC A1);
 2997: FORMAT(' In NODE beginning in line:',i4,
              ' recursion in ALIAS @', @LC A1);
 2999: FORMAT(' No design for the NODE requested in',
        ' line:',I4,' Node number:',I3,'  with local index: ', @Lc A1)
