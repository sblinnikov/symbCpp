/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: title   start ]
Steeb and Hardy Ch.9. Unitary Operators
   [wxMaxima: title   end   ] */

/* [wxMaxima: comment start ]
// unitary1.cpp
// compile with
// g++ -I ./include -L ~/lib -o unitary1.exe unitary1.cpp -fno-elide-constructors -lsymbcgf
// result saved in
// unitary1.out

#include <iostream>
#include <list>
#include <symbolicc++.h>
using namespace std;

list<Symbolic> mgs(const list<Symbolic> &x,
                   list<Symbolic> G = list<Symbolic>())
{list<Symbolic>::const_iterator xj;
list<Symbolic>::iterator y;
Symbolic gj;

for(xj=x.begin();xj!=x.end();xj++)
{
gj = *xj;
for(y = G.begin();y != G.end();y++)
 gj -= ((*y).transpose()*(*xj))*(*y);
 if(gj != 0*gj)
 G.push_back(gj/sqrt(gj.transpose()*gj));
}
return G;
}

Symbolic unitary(const Symbolic &psi,const Symbolic &phi)
{
int n = psi.rows();
 list<Symbolic> e, gpsi, gphi;
 list<Symbolic>::iterator j, k;
 Symbolic U = 0;
 for(int i=0;i<n;i++)
 {
 Symbolic ei("ei",n);
 ei *= 0; // means ei=ei*0
 ei(i) = 1;
 e.push_back(ei); //  Adds a new element at the end of the list container, after its current last element. 
// The content of val is copied (or moved) to the new element.
// This effectively increases the container size by one.
 }

 gpsi.push_back(psi); gphi.push_back(phi);
 list<Symbolic> G_psi = mgs(e,gpsi);
 list<Symbolic> G_phi = mgs(e,gphi);

 for (j =G_psi. begin(), k=G_phi.begin();j!=G_psi.end();j++, k++)
  U += (*k)*j->transpose();
return U;
}

int main(void)
{
Symbolic psi, phi;
Symbolic sqrt2 = sqrt(Symbolic(2)), sqrt3 = sqrt(Symbolic(3));
cout << "Hadamard transform" << endl;
psi = Symbolic("psi",2); phi = Symbolic("phi",2);
psi(0) = 1; psi(1) = 0;
phi(0) = 1/sqrt2; phi(1) = 1/sqrt2;
cout << unitary(psi, phi) << endl;
cout << "Bell basis transform" << endl;
psi = Symbolic("psi",4); phi = Symbolic("phi",4);
psi(0) = 0; psi(1) = 0; psi(2) = 0; psi(3) = 1;
phi(0) = 1/sqrt2; phi(1) = 0; phi(2) = 0; phi(3) = 1/sqrt2;
cout << unitary(psi, phi) << endl;
cout << "GHZ -> W state transform" << endl;
psi = Symbolic("psi",8); phi = Symbolic("phi",8);
psi(0) = 1/sqrt2;
psi(1) = psi(2) = psi(3) = psi(4) = psi(5) = psi(6) = 0;
psi(7) = 1/sqrt2;
phi(0) = 0; phi(1) = 1/sqrt3; phi(2) = 1/sqrt3;
phi(3) = 0; phi (4) = 1/sqrt3;
phi (5) = phi (6) = phi(7) = 0;
cout << unitary(psi,phi) << endl;
return 0;
}

   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
load(eigen);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
The package eigen contans gramschmidt:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
x: matrix ([1, 2, 3], [9, 18, 30], [12, 48, 60]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
y: gramschmidt (x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map (innerproduct, [y[1], y[2], y[3]], [y[2], y[3], y[1]]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
y[1].y[2];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
inprod(y[1],y[2]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Gram-Schmidt algorithm using a specified inner product function. 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ip (f, g) := integrate (f * g, u, a, b);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Here ip==inner product via integration of functions f and g.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
z : gramschmidt([1, sin(u), cos(u)], ip), a= -%pi/2, b=%pi/2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map (ip, [z[1], z[2], z[3]], [z[2], z[3], z[1]]), a= -%pi/2, b=%pi/2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
testing programming in Maxima
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tangent0(fn, x) :=
       diff(fn(x), x) / ((diff(fn(x), x) . diff(fn (x), x))^(1/2))$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tangent0(sin, x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
a better definition, using block, thus avoiding multiple evalutaions of diff:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
tangent(fn, x) :=
  block ( [df: diff(fn(x), x)],
           df / (df . df)^(1/2)
        )$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
tangent(sin,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
 A: matrix([1,2],[3,4]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
-- simple test of matrix output (destroyed by dirac2.mac)
   [wxMaxima: comment end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
